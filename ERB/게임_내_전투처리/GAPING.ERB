
;CON	キャラの変身状況	0：変身前　1：変身後
;TAR	キャラクターID		0：現在のTARGET


;RANK 0　E 繊毛
;	中央値：0
;	範囲　：-5 〜 5

;RANK 1　E+
;	中央値：10
;	範囲　：5 〜 15

;RANK 2　D 指
;	中央値：20
;	範囲　：15 〜 25

;RANK 3　D+
;	中央値：32
;	範囲　：25 〜 40

;RANK 4　C 男性器
;	中央値：50
;	範囲　：40 〜 60

;RANK 5　C+
;	中央値：72
;	範囲　：60 〜 85

;RANK 6　B 腕
;	中央値：100
;	範囲　：85 〜 115

;RANK 7　B+
;	中央値：135
;	範囲　：115 〜 155

;RANK 8　A 頭
;	中央値：180
;	範囲　：155 〜 205

;RANK 9　A+
;	中央値：235
;	範囲　：205 〜 265

;RANK10　S 腰
;	中央値：300
;	範囲　：265 〜 335

;RANK11　S+
;	中央値：400
;	範囲　：335 〜 465

;＠中国版より
;RANK12　凄 头
;	中央值：550
;	範囲　：465 〜 635
;RANK13　極 
;	中央值：700
;	範囲　：635 〜 765
;RANK14　絶 腰
;	中央值：850
;	範囲　：765 〜 935
;RANK15　獄
;	中央值：1000
;	範囲　：935 〜 1065
;RANK16　狂 槌
;	中央值：1135
;	範囲　：1065 〜 1205
;RANK17　最狂 艏
;	中央值：1280
;	範囲　：1205 〜 1355

;--------------------------------------------------
;FUNCTION関数	主に変数算出
;--------------------------------------------------

;--------------------------------------------------
;拡張度から現在の拡張ランクを返す
;ARG	拡張度
@GAPING_RANK(ARG)
#FUNCTION

;E	繊毛
IF ARG < 5
	LOCAL = 0
;E+
ELSEIF ARG < 15
	LOCAL = 1
;D	指
ELSEIF ARG < 25
	LOCAL = 2
;D+
ELSEIF ARG < 40
	LOCAL = 3
;C	男性器
ELSEIF ARG < 60
	LOCAL = 4
;C+
ELSEIF ARG < 85
	LOCAL = 5
;B	腕
ELSEIF ARG < 115
	LOCAL = 6
;B+
ELSEIF ARG < 155
	LOCAL = 7
;A	頭
ELSEIF ARG < 205
	LOCAL = 8
;A+
ELSEIF ARG < 265
	LOCAL = 9
;S	腰
ELSEIF ARG < 335
	LOCAL = 10
;S+
ELSEIF ARG < 465
	LOCAL = 11
;凄
ELSEIF ARG < 635
	LOCAL = 12
;極
ELSEIF ARG < 765
	LOCAL = 13
;絶
ELSEIF ARG < 935
	LOCAL = 14
;獄
ELSEIF ARG < 1065
	LOCAL = 15
;狂
ELSEIF ARG < 1205
	LOCAL = 16
;最狂
ELSE
	LOCAL = 17
ENDIF

RETURNF LOCAL



;--------------------------------------------------
;拡張ランクから、Ｅ〜Ｓ+もしくは説明テキストを返す
;ARG	拡張ランク
;ARGS	NAME	ランクのアルファベット表記
;	TEXT	ランクごとの説明文
;	T_TEXT	촉수側の説明文
@GAPING_RANK_STR(ARG, ARGS)
#FUNCTIONS
SELECTCASE ARGS
	CASE "NAME"
		IF ARG == -2
			LOCALS = %UNICODE(0x0020)%―%UNICODE(0x0020)%
		ELSEIF ARG == -1
			LOCALS = 처녀
		ELSEIF ARG == 0
			LOCALS = %UNICODE(0x0020)%Ｅ%UNICODE(0x0020)%
		ELSEIF ARG == 1
			LOCALS = %UNICODE(0x0020)%Ｅ+
		ELSEIF ARG == 2
			LOCALS = %UNICODE(0x0020)%Ｄ%UNICODE(0x0020)%
		ELSEIF ARG == 3
			LOCALS = %UNICODE(0x0020)%Ｄ+
		ELSEIF ARG == 4
			LOCALS = %UNICODE(0x0020)%Ｃ%UNICODE(0x0020)%
		ELSEIF ARG == 5
			LOCALS = %UNICODE(0x0020)%Ｃ+
		ELSEIF ARG == 6
			LOCALS = %UNICODE(0x0020)%Ｂ%UNICODE(0x0020)%
		ELSEIF ARG == 7
			LOCALS = %UNICODE(0x0020)%Ｂ+
		ELSEIF ARG == 8
			LOCALS = %UNICODE(0x0020)%Ａ%UNICODE(0x0020)%
		ELSEIF ARG == 9
			LOCALS = %UNICODE(0x0020)%Ａ+
		ELSEIF ARG == 10
			LOCALS = %UNICODE(0x0020)%Ｓ%UNICODE(0x0020)%
		ELSEIF ARG == 11
			LOCALS = %UNICODE(0x0020)%Ｓ+
		ELSEIF ARG == 12
			LOCALS = %UNICODE(0x0020)%凄%UNICODE(0x0020)%
		ELSEIF ARG == 13
			LOCALS = %UNICODE(0x0020)%極%UNICODE(0x0020)%
		ELSEIF ARG == 14
			LOCALS = %UNICODE(0x0020)%絶%UNICODE(0x0020)%
		ELSEIF ARG == 15
			LOCALS = %UNICODE(0x0020)%獄%UNICODE(0x0020)%
		ELSEIF ARG == 16
			LOCALS = %UNICODE(0x0020)%狂%UNICODE(0x0020)%
		ELSE
			LOCALS = %UNICODE(0x0020)%最狂%UNICODE(0x0020)%
		ENDIF
	CASE "TEXT"
		IF ARG == 0
			LOCALS = 繊毛と同程度の
		ELSEIF ARG == 1
			LOCALS = 繊毛よりも太い
		ELSEIF ARG == 2
			LOCALS = 自身の指と同程度の
		ELSEIF ARG == 3
			LOCALS = 自身の指よりも太い
		ELSEIF ARG == 4
			LOCALS = 一般的な男性器と同程度の
		ELSEIF ARG == 5
			LOCALS = 一般的な男性器よりも太い
		ELSEIF ARG == 6
			LOCALS = 自身の腕と同程度の
		ELSEIF ARG == 7
			LOCALS = 自身の腕より太い
		ELSEIF ARG == 8
			LOCALS = 自身の脛と同程度の
		ELSEIF ARG == 9
			LOCALS = 自身の脛より太い
		ELSEIF ARG == 10
			LOCALS = 自身の太ももと同程度の
		ELSEIF ARG == 11
			LOCALS = 自身の太ももより太い
		ELSEIF ARG == 12
			LOCALS = 自身の頭と同程度の
		ELSEIF ARG == 13
			LOCALS = 自身の頭より太い
		ELSEIF ARG == 14
			LOCALS = 自身の腰より太い
		ELSEIF ARG == 15
			LOCALS = 自身の腰よりも格段に太い
		ELSEIF ARG == 16
			;＠中国版らしさを感じる喩え
			LOCALS = 破城槌のように太い
		ELSE
			LOCALS = 船の船首ほどの大きさの
		ENDIF
		LOCALS = %LOCALS%モノを受け入れられる
		SIF ARG == -2
			LOCALS = 
		SIF ARG == -1
			LOCALS = 未だ純潔を保っている
	CASE "T_TEXT"
		IF ARG == 0
			LOCALS = 繊毛サイズ
		ELSEIF ARG == 1
			LOCALS = 繊毛よりは太い程度
		ELSEIF ARG == 2
			LOCALS = %PRINT_CALLNAME(TARGET)%の指と同程度
		ELSEIF ARG == 3
			LOCALS = %PRINT_CALLNAME(TARGET)%の指よりも太い
		ELSEIF ARG == 4
			LOCALS = 一般的な男性器と同程度
		ELSEIF ARG == 5
			LOCALS = 一般的な男性器よりも太い
		ELSEIF ARG == 6
			LOCALS = %PRINT_CALLNAME(TARGET)%の腕と同程度
		ELSEIF ARG == 7
			LOCALS = %PRINT_CALLNAME(TARGET)%の腕より太い
		ELSEIF ARG == 8
			LOCALS = %PRINT_CALLNAME(TARGET)%の脛と同程度
		ELSEIF ARG == 9
			LOCALS = %PRINT_CALLNAME(TARGET)%の脛よりも太い
		ELSEIF ARG == 10
			LOCALS = %PRINT_CALLNAME(TARGET)%の太ももと同程度
		ELSEIF ARG == 11
			LOCALS = %PRINT_CALLNAME(TARGET)%の太ももよりも太い
		ELSEIF ARG == 12
			LOCALS = %PRINT_CALLNAME(TARGET)%の頭と同程度
		ELSEIF ARG == 13
			LOCALS = %PRINT_CALLNAME(TARGET)%の頭よりも太い
		ELSEIF ARG == 14
			LOCALS = %PRINT_CALLNAME(TARGET)%の腰よりも太い
		ELSEIF ARG == 15
			LOCALS = %PRINT_CALLNAME(TARGET)%の腰よりも格段に太い
		ELSEIF ARG == 16
			LOCALS = %PRINT_CALLNAME(TARGET)%を引き裂けそうなほど太い
		ELSE
			LOCALS = %PRINT_CALLNAME(TARGET)%を粉砕しそうなほど太い
		ENDIF
ENDSELECT

RETURNF LOCALS



;--------------------------------------------------
;その拡張ランクまでに必要な拡張度を返す
;ARG	拡張ランク
@GAPING_RANK_TO_POINT(ARG)
#FUNCTION

VARSET LOCAL
IF ARG == 0
	LOCAL = 0
ELSEIF ARG == 1
	LOCAL = 5
ELSEIF ARG == 2
	LOCAL = 15
ELSEIF ARG == 3
	LOCAL = 25
ELSEIF ARG == 4
	LOCAL = 40
ELSEIF ARG == 5
	LOCAL = 60
ELSEIF ARG == 6
	LOCAL = 85
ELSEIF ARG == 7
	LOCAL = 115
ELSEIF ARG == 8
	LOCAL = 155
ELSEIF ARG == 9
	LOCAL = 205
ELSEIF ARG == 10
	LOCAL = 265
ELSEIF ARG == 11
	LOCAL = 335
;計算の都合上、ランクの1段階外側も設定
ELSEIF ARG == -1
	LOCAL = -5
ELSEIF ARG == 12
	LOCAL = 465
ELSEIF ARG == 13
	LOCAL = 635
ELSEIF ARG == 14
	LOCAL = 765
ELSEIF ARG == 15
	LOCAL = 935
ELSEIF ARG == 16
	LOCAL = 1065
ELSEIF ARG == 17
	LOCAL = 1205

ENDIF

RETURNF LOCAL



;--------------------------------------------------
;拡張度からTARGETに応じた実際のサイズ（mm）を返す
;ARG	拡張度
;D_RANK	TARGETの現在の拡張ランク
;D_SIZE	その拡張ランクの上限・下限
;MED_VAR	各ランクの中央値
@GAPING_SIZE(ARG, CON = -1, TAR = -1)
#FUNCTION
#DIM CON
#DIM TAR
#DIM D_RANK
#DIM D_SIZE, 2
#DIM MED_VAR, 2

SIF TAR == -1
	TAR = TARGET
SIF CON == -1
	CON = CFLAG:TAR:1

D_RANK = GAPING_RANK(ARG)
;そのランクの中央値を求める
MED_VAR:0 = (GAPING_RANK_TO_POINT(D_RANK) + GAPING_RANK_TO_POINT(D_RANK + 1)) / 2

;現在の拡張度が中央値より高いか低いか
IF ARG > MED_VAR:0
	MED_VAR:1 = (GAPING_RANK_TO_POINT(D_RANK + 1) + GAPING_RANK_TO_POINT(D_RANK + 2)) / 2
ELSE
	MED_VAR:1 = MED_VAR:0
	MED_VAR:0 = (GAPING_RANK_TO_POINT(D_RANK) + GAPING_RANK_TO_POINT(D_RANK - 1)) / 2
	D_RANK --
ENDIF

IF D_RANK == 0
	D_SIZE:0 = 0
	D_SIZE:1 = GAPING_SIZE_01(CON, TAR)
ELSEIF D_RANK == 1
	D_SIZE:0 = GAPING_SIZE_01(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_02(CON, TAR)
ELSEIF D_RANK == 2
	D_SIZE:0 = GAPING_SIZE_02(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_03(CON, TAR)
ELSEIF D_RANK == 3
	D_SIZE:0 = GAPING_SIZE_03(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_04(CON, TAR)
ELSEIF D_RANK == 4
	D_SIZE:0 = GAPING_SIZE_04(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_05(CON, TAR)
ELSEIF D_RANK == 5
	D_SIZE:0 = GAPING_SIZE_05(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_06(CON, TAR)
ELSEIF D_RANK == 6
	D_SIZE:0 = GAPING_SIZE_06(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_07(CON, TAR)
ELSEIF D_RANK == 7
	D_SIZE:0 = GAPING_SIZE_07(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_08(CON, TAR)
ELSEIF D_RANK == 8
	D_SIZE:0 = GAPING_SIZE_08(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_09(CON, TAR)
ELSEIF D_RANK == 9
	D_SIZE:0 = GAPING_SIZE_09(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_10(CON, TAR)
ELSEIF D_RANK == 10
	D_SIZE:0 = GAPING_SIZE_10(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_11(CON, TAR)
ELSEIF D_RANK == 11
	D_SIZE:0 = GAPING_SIZE_11(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_12(CON, TAR)
ELSEIF D_RANK == 12
	D_SIZE:0 = GAPING_SIZE_12(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_13(CON, TAR)
ELSEIF D_RANK == 13
	D_SIZE:0 = GAPING_SIZE_13(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_14(CON, TAR)
ELSEIF D_RANK == 14
	D_SIZE:0 = GAPING_SIZE_14(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_15(CON, TAR)
ELSEIF D_RANK == 15
	D_SIZE:0 = GAPING_SIZE_15(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_16(CON, TAR)
ELSEIF D_RANK == 16
	D_SIZE:0 = GAPING_SIZE_16(CON, TAR)
	D_SIZE:1 = GAPING_SIZE_17(CON, TAR)

ENDIF

IF D_RANK > 16
	RETURNF (ARG - 125) * GET_HEIGHT(CON, TAR) / 1581 + GAPING_SIZE_11(CON, TAR)
ENDIF

;RETURNF (D_SIZE:1 - D_SIZE:0) * (ARG - GAPING_RANK_TO_POINT(D_RANK)) / (GAPING_RANK_TO_POINT(D_RANK + 1) - (GAPING_RANK_TO_POINT(D_RANK))) + D_SIZE:0
RETURNF (D_SIZE:1 - D_SIZE:0) * (ARG - MED_VAR:0) / (MED_VAR:1 - MED_VAR:0) + D_SIZE:0


;繊毛
@GAPING_SIZE_01(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GAPING_SIZE_02(CON, TAR) * 10 / 20

;D	指
@GAPING_SIZE_02(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HEIGHT(CON, TAR) * 10 / 1054

;D+	指
@GAPING_SIZE_03(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

LOCAL = GAPING_SIZE_02(CON, TAR)

RETURNF (GAPING_SIZE_04(CON, TAR) - LOCAL) * 10 / 25 + LOCAL

;C	男性器
@GAPING_SIZE_04(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HEIGHT(CON, TAR) * 100 / 3952

;C+	男性器
@GAPING_SIZE_05(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

LOCAL = GAPING_SIZE_04(CON, TAR)

RETURNF (GAPING_SIZE_06(CON, TAR) - LOCAL) * 15 / 35 + LOCAL

;B	腕や脚
@GAPING_SIZE_06(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HEIGHT(CON, TAR) * 100 / 2108

;B+	腕や脚
@GAPING_SIZE_07(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

LOCAL = GAPING_SIZE_06(CON, TAR)

RETURNF (GAPING_SIZE_08(CON, TAR) - LOCAL) * 40 / 85 + LOCAL

;A	頭
@GAPING_SIZE_08(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HEIGHT(CON, TAR) * 10 / 131 + 40

;A+	脛
@GAPING_SIZE_09(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

LOCAL = GAPING_SIZE_08(CON, TAR)

RETURNF (GAPING_SIZE_10(CON, TAR) - LOCAL) * 40 / 83 + LOCAL

;S	股
@GAPING_SIZE_10(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HEIGHT(CON, TAR) * 10 / 160 + 20
;S+	股
@GAPING_SIZE_11(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

LOCAL = GAPING_SIZE_10(CON, TAR)

RETURNF (GAPING_SIZE_12(CON, TAR) - LOCAL) * 40 / 81 + LOCAL

;凄	頭
@GAPING_SIZE_12(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HEIGHT(CON, TAR) * 10 / 131 + 40

;極	頭
@GAPING_SIZE_13(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

LOCAL = GAPING_SIZE_12(CON, TAR)

RETURNF (GAPING_SIZE_14(CON, TAR) - LOCAL) * 45 / 90 + LOCAL

;絶	腰
@GAPING_SIZE_14(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HIP(CON, TAR) * 100 / 314

;獄	腰
@GAPING_SIZE_15(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HIP(CON, TAR) * 13849 / 31415

;RANK16　狂 槌
@GAPING_SIZE_16(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HIP(CON, TAR) * 13660 / 31415

;RANK17　最狂 艏
@GAPING_SIZE_17(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

RETURNF GET_HIP(CON, TAR) * 13740 / 31415





;--------------------------------------------------
;変身状況に応じた신장を返す
;TARGETが-1の場合、「一般的な」サイズ
@GET_HEIGHT(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR
#DIM 신장値
#DIM KEEPTARGET

KEEPTARGET = TARGET

IF TAR < 0
	신장値 = 1581
ELSE
	SIF TAR > 0
		TARGET = TAR

	IF CON == 0 || TALENT:변신능력 != 1
		신장値 = BASE:신장
	ELSE
		신장値 = MAXBASE:신장
	ENDIF
ENDIF

TARGET = KEEPTARGET

RETURNF 신장値



;--------------------------------------------------
;変身状況に応じた골반둘레を返す
;TARGETが-1の場合、「一般的な」サイズ
@GET_HIP(CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR
#DIM 골반둘레値
#DIM KEEPTARGET

KEEPTARGET = TARGET

IF TAR < 0
	골반둘레値 = 816
ELSE
	SIF TAR > 0
		TARGET = TAR

	IF CON == 1 || TALENT:변신능력 != 1 || (CON == 0 && CFLAG:1 == 0)
		골반둘레値 = BASE:골반둘레
	ELSE
		골반둘레値 = MAXBASE:골반둘레
	ENDIF
ENDIF

TARGET = KEEPTARGET

RETURNF 골반둘레値



;--------------------------------------------------
;実際のサイズ（mm）からTARGETに応じた拡張ランクを返す
;ARG
@GAPING_SIZE_TO_RANK(ARG, CON, TAR)
#FUNCTION
#DIM CON
#DIM TAR

IF ARG < GAPING_SIZE_01(CON, TAR)
	LOCAL = 0
ELSEIF ARG < GAPING_SIZE_02(CON, TAR)
	LOCAL = 1
ELSEIF ARG < GAPING_SIZE_03(CON, TAR)
	LOCAL = 2
ELSEIF ARG < GAPING_SIZE_04(CON, TAR)
	LOCAL = 3
ELSEIF ARG < GAPING_SIZE_05(CON, TAR)
	LOCAL = 4
ELSEIF ARG < GAPING_SIZE_06(CON, TAR)
	LOCAL = 5
ELSEIF ARG < GAPING_SIZE_07(CON, TAR)
	LOCAL = 6
ELSEIF ARG < GAPING_SIZE_08(CON, TAR)
	LOCAL = 7
ELSEIF ARG < GAPING_SIZE_09(CON, TAR)
	LOCAL = 8
ELSEIF ARG < GAPING_SIZE_10(CON, TAR)
	LOCAL = 9
ELSEIF ARG < GAPING_SIZE_11(CON, TAR)
	LOCAL = 10
ELSEIF ARG < GAPING_SIZE_12(CON, TAR)
	LOCAL = 11
ELSEIF ARG < GAPING_SIZE_13(CON, TAR)
	LOCAL = 12
ELSEIF ARG < GAPING_SIZE_14(CON, TAR)
	LOCAL = 13
ELSEIF ARG < GAPING_SIZE_15(CON, TAR)
	LOCAL = 14
ELSEIF ARG < GAPING_SIZE_16(CON, TAR)
	LOCAL = 15
ELSEIF ARG < GAPING_SIZE_17(CON, TAR)
	LOCAL = 16
ELSE
	LOCAL = 17
ENDIF

RETURNF LOCAL



;--------------------------------------------------
;サイズ差による拡張度の上昇値を決定
;ARGS	部位指定　Ｖ, Ａ

;P_SIZE	プレイヤーサイズ
;P_RANK	プレイヤーランク
;E_SIZE	촉수サイズ
@GAPING_SIZE_TO_POINT(ARGS, TAR)
#FUNCTION
#DIM TAR
#DIM P_SIZE
#DIM P_RANK
#DIM E_SIZE
#DIM KEEPTARGET

SIF ARGS != "Ｖ" && ARGS != "Ａ"
	RETURNF 0

KEEPTARGET = TARGET
SIF TAR > 0
	TARGET = TAR

;対象が남자かつＶなら終了
IF ISMALE() && ARGS == "Ｖ"
	TARGET = KEEPTARGET
	RETURNF 0
ENDIF

IF ARGS == "Ｖ"
	P_SIZE = GAPING_SIZE(CFLAG:35, 0)
	P_RANK = GAPING_RANK(CFLAG:35)
	E_SIZE = TENTACLE_SIZE:1:쾌V
	IF INSERT & 질 || CFLAG:0 == 1
		LOCAL = (E_SIZE > P_SIZE) * 3
	ELSE
		LOCAL = 0
	ENDIF
ELSEIF ARGS == "Ａ"
	P_SIZE = GAPING_SIZE(CFLAG:36, 0)
	P_RANK = GAPING_RANK(CFLAG:36)
	E_SIZE = TENTACLE_SIZE:1:쾌A
	IF INSERT & 애널 || CFLAG:0 == 1
		LOCAL = (E_SIZE > P_SIZE) * 3
	ELSE
		LOCAL = 0
	ENDIF
ENDIF

LOCAL = LOCAL + LIMIT(GAPING_SIZE_TO_RANK(E_SIZE) - P_RANK, 0, 99)

TARGET = KEEPTARGET

RETURNF LOCAL


;-----------------------------------------------------------------------------------------------------------------------------------------------------------
;通常の関数	処理
;-----------------------------------------------------------------------------------------------------------------------------------------------------------

;--------------------------------------------------
;各部位に使用される촉수サイズの表示
@PRINT_TENTACLE_SIZE, LOCAL:0, LOCAL:1, LOCAL:2, LOCAL:3
;T_RANK	촉수サイズランク
#DIM T_RANK, 2
REPEAT 감각수
	IF TENTACLE_SIZE:0:COUNT > 0 || TENTACLE_SIZE:1:COUNT > 0
		T_RANK:0 = GAPING_SIZE_TO_RANK(TENTACLE_SIZE:0:COUNT)
		T_RANK:1 = GAPING_SIZE_TO_RANK(TENTACLE_SIZE:1:COUNT)
		;部位名表示
		SUBSTRINGU ABLNAME:COUNT, 0, 1
		LOCALS = 　%RESULTS%用촉수　
		;촉수ではないため、TENTACLE_SIZE:0:COUNTは0のまま
		IF TENTACLE_SIZE:0:COUNT == 0
			LOCALS = %LOCALS%[%GAPING_RANK_STR(T_RANK:1, "NAME")%] %GAPING_RANK_STR(T_RANK:1, "T_TEXT")%
		;それ以外
		ELSE
			LOCALS = %LOCALS%[%GAPING_RANK_STR(T_RANK:1, "NAME")%] %GAPING_RANK_STR(T_RANK:0, "T_TEXT")% {TENTACLE_NUM:0:COUNT}本 
			SIF FLAG:700 == 1 && ((COUNT == 1 && INSERT & 질) || (COUNT == 2 && INSERT & 애널))
				LOCALS += "（挿入中）"
			SIF (SHIELD:COUNT > 0 && FLAG:700 == 0) || (TENTACLE_NUM:1:COUNT == 0 && FLAG:700 == 1)
				LOCALS = %LOCALS, 50, LEFT% → [ × ] 結界に阻まれている
		ENDIF
		;debug表示
		SIF FLAG:999 > 0
			LOCALS = %LOCALS% 　<font color='#606060' >/* debug */ {TENTACLE_SIZE:0:COUNT / 10, 2}.{TENTACLE_SIZE:0:COUNT % 10} cm × {TENTACLE_NUM:0:COUNT} → {TENTACLE_SIZE:1:COUNT / 10, 2}.{TENTACLE_SIZE:1:COUNT % 10} cm</font>
		SIF LOCAL:COUNT - COMMON_PALAM:COUNT > 0 && (FLAG:700 == 0 || TFLAG:10 != 1006 || CFLAG:0 == 1)
			HTML_PRINT LOCALS
	ENDIF
REND
PRINTL 




;現在の拡張度を表示
;--------------------------------------------------
@PRINTFORM_GAPING_NOW, TAR = -1, CON = -1
#DIM CON
#DIM TAR
SIF TAR == -1
	TAR = TARGET
SIF CON == -1
	CON = CFLAG:TAR:1


;拡張度컨피그フラグチェック
IF CONFIG_CHECK_MANIAC_F(16) == 1 && CFLAG:TAR:34>0
	;拡張度初期値設定
	IF CFLAG:TAR:35 == 0
		CFLAG:TAR:35 = LIMIT((BASE:TAR:나이 - 10), 0, 15) / 3 - (TALENT:TAR:미성숙 > 0) * 3 + (TALENT:TAR:V민감 > 0) * 3 - (TALENT:TAR:V둔감 > 0) * 3 + 20
		CALL V_GAPING, EXP:TAR:V확장경험 * 10, TAR
	ENDIF
	IF CFLAG:TAR:36 == 0
		CFLAG:TAR:36 = LIMIT((20 - BASE:TAR:나이), 0, 15) / 3 + (TALENT:TAR:A민감 > 0) * 3 - (TALENT:TAR:A둔감 > 0) * 3 + 20
		CALL A_GAPING, EXP:TAR:A확장경험 * 10, TAR
	ENDIF

	PRINTL 　　拡張度

	FOR LOCAL:1, 0, 2
		IF LOCAL:1 == 0
			IF ISMALE(TAR)
				LOCALS = %UNICODE(0x0020)%―%UNICODE(0x0020)%
			ELSE
				LOCALS = 질径
			ENDIF
		ELSE
			LOCALS = 肛径
		ENDIF

		LOCAL:2 = GAPING_RANK(CFLAG:TAR:(35 + LOCAL:1))
		LOCAL:3 = GAPING_SIZE(CFLAG:TAR:(35 + LOCAL:1), CON, TAR)

		LOCALS:1 = %LOCALS:1, 3, LEFT%

		IF LOCAL:1 == 0 && (TALENT:TAR:처녀 == 1 || ISMALE(TAR))
			LOCALS = 　　　　%LOCALS%：　 ―%UNICODE(0x0020)%
		ELSE
			LOCALS = 　　　　%LOCALS%：{LOCAL:3 / 10, 4}.{LOCAL:3 % 10}
		ENDIF

		SIF LOCAL:1 == 0 && TALENT:TAR:처녀 == 1
			LOCAL:2 = -1
		SIF LOCAL:1 == 0 && ISMALE(TAR)
			LOCAL:2 = -2

		LOCALS = %LOCALS% cm　/　<nonbutton title='%GAPING_RANK_STR(LOCAL:2, "TEXT")%'>[%GAPING_RANK_STR(LOCAL:2, "NAME")%]</nonbutton>
		SIF FLAG:999 && FLAG:700 == 0
			LOCALS = %LOCALS%　　<font color='#606060' >/* debug */ (拡張度：{CFLAG:TAR:(35 + LOCAL:1), 4})　　　<button value='{30 + LOCAL:1}'>[{30 + LOCAL:1}]リセット</button></font>
		HTML_PRINT LOCALS
	NEXT
ENDIF

;--------------------------------------------------
;Ｖ拡張度の上昇
;CFLAG:35	Ｖ拡張度
;ARG		上昇値
;P_SIZE		拡張後との比較のためサイズを一時記憶
@V_GAPING(ARG, TAR)
#DIM TAR
#DIM KEEPTARGET
#DIM V_RANK
#DIM UPRATE
#DIM P_SIZE
#DIM LCOUNT

KEEPTARGET = TARGET
SIF TAR > 0
	TARGET = TAR
SIF ISMALE()
	RETURN 0
SIF CFLAG:34 == 0
	RETURN 0

;上昇値が0なら終了
SIF ARG == 0
	RETURN 0

P_SIZE = GAPING_SIZE(CFLAG:35)

FOR LCOUNT, 0, ARG * ARG

	V_RANK = GAPING_RANK_TO_POINT(CFLAG:35)
	IF CFLAG:1 > 0
		UPRATE = LIMIT((20 - MAXBASE:나이), 0, 15) * 3 + 30
	ELSE
		UPRATE = LIMIT((20 - BASE:나이), 0, 15) * 3 + 30
	ENDIF
	UPRATE = 2500 - (POWER(CFLAG:35, 2) / 150 + GAPING_RANK(CFLAG:35) * 100) * UPRATE / 20 + EXP:V확장경험 * 10 + EXP:출산경험 * 20

	SIF TALENT:미성숙 > 0
		UPRATE -= 200
	SIF TALENT:V민감 > 0
		UPRATE += 200
	SIF TALENT:V둔감 > 0
		UPRATE -= 300
	SIF TALENT:음호 > 0
		UPRATE += 300

	IF ARG >= 8
		UPRATE += 4000
	ELSEIF ARG >= 7
		UPRATE += 2000
	ELSEIF ARG >= 6
		UPRATE += 1000
	ELSEIF ARG >= 5
		UPRATE += 500
	ENDIF

	UPRATE = LIMIT(UPRATE, 50, 9999)

	;極端な拡張を抑制されている場合
	IF CONFIG_CHECK_MANIAC_F(17) == 0
		SIF CFLAG:35 >= GAPING_RANK_TO_POINT(8) - 1
			RETURN 0
		UPRATE /= 3
		
		SIF CFLAG:35 >= 110
			CFLAG:35 = 110
	ENDIF

	SIF UPRATE > RAND:10000
		CFLAG:35 ++
NEXT

IF TALENT:처녀 > 0
	LOCAL = 0
ELSE
	LOCAL = GAPING_SIZE(CFLAG:35) - P_SIZE
ENDIF

TARGET = KEEPTARGET
RETURN LOCAL

;--------------------------------------------------
;Ａ拡張の上昇
;CFLAG:36	Ａ拡張度
;ARG		上昇値
;P_SIZE		拡張後との比較のためサイズを一時記憶
@A_GAPING(ARG, TAR)
#DIM TAR
#DIM KEEPTARGET
#DIM UPRATE
#DIM P_SIZE
#DIM LCOUNT

KEEPTARGET = TARGET
SIF TAR > 0
	TARGET = TAR
SIF CFLAG:34 == 0
	RETURN 0

;上昇値が0なら終了
SIF ARG == 0
	RETURN 0

P_SIZE = GAPING_SIZE(CFLAG:36)

FOR LCOUNT, 0, ARG * ARG

	IF CFLAG:1 > 0
		UPRATE = LIMIT(MAXBASE:나이 - 10, 0, 15) * 3 + 30
	ELSE
		UPRATE = LIMIT(BASE:나이 - 10, 0, 15) * 3 + 30

	ENDIF
	UPRATE = 2500 - (POWER(CFLAG:36, 2) / 150 + GAPING_RANK(CFLAG:36) * 100) * UPRATE / 20 + EXP:A확장경험 * 10

	SIF TALENT:A민감 > 0
		UPRATE += UPRATE / 8 + 200
	SIF TALENT:A둔감 > 0
		UPRATE -= UPRATE / 8 + 200
	SIF TALENT:음고 > 0
		UPRATE += UPRATE / 8 + 100

	IF ARG >= 8
		UPRATE += 4000
	ELSEIF ARG >= 7
		UPRATE += 2000
	ELSEIF ARG >= 6
		UPRATE += 1000
	ELSEIF ARG >= 5
		UPRATE += 500
	ENDIF

	UPRATE = LIMIT(UPRATE, 500, 9999)

	;極端な拡張を抑制されている場合
	IF CONFIG_CHECK_MANIAC_F(17) == 0
		SIF CFLAG:36 >= GAPING_RANK_TO_POINT(8) - 1
			RETURN 0
		UPRATE /= 3
		
		SIF CFLAG:36 >= 110
			CFLAG:36 = 110
	ENDIF

	SIF UPRATE > RAND:10000
		CFLAG:36 ++
NEXT

LOCAL = GAPING_SIZE(CFLAG:36) - P_SIZE

TARGET = KEEPTARGET

RETURN LOCAL

;--------------------------------------------------
;V확장경험の獲得
;CFLAG:35	Ｖ拡張度
;ARG		サイズ差
@GET_V_GAPING_EXP(ARG, TAR, OPTION = 0)
#DIM OPTION
#DIM TAR
#DIM KEEPTARGET
#DIM LCOUNT

KEEPTARGET = TARGET
SIF TAR > 0
	TARGET = TAR
SIF ISMALE()
	RETURN 0
SIF CFLAG:34 == 0
	RETURN 0

IF ARG >= 6
	LOCAL = 2
ELSEIF ARG >= 3
	LOCAL = 1
ENDIF
IF LOCAL > 0 && CFLAG:0 != 1 && OPTION == 0
	EXP:V확장경험 += LOCAL
	PRINTFORML V확장경험 + {LOCAL}
ENDIF
TARGET = KEEPTARGET

RETURN LOCAL

;--------------------------------------------------
;サイズ差によるＡ拡張判定
;CFLAG:36	Ａ拡張度
;ARG		サイズ差
@GET_A_GAPING_EXP(ARG, TAR, OPTION = 0)
#DIM OPTION
#DIM TAR
#DIM KEEPTARGET
#DIM LCOUNT

KEEPTARGET = TARGET
SIF TAR > 0
	TARGET = TAR
SIF CFLAG:34 == 0
	RETURN 0

IF ARG >= 6
	LOCAL = 2
ELSEIF ARG >= 3
	LOCAL = 1
ENDIF
IF LOCAL > 0 && CFLAG:0 != 1 && OPTION == 0
	EXP:A확장경험 += LOCAL
	PRINTFORML A확장경험 + {LOCAL}
ENDIF

TARGET = KEEPTARGET

RETURN LOCAL


;--------------------------------------------------
;보스 촉수・ラスボス各部位用촉수のサイズ
;ARG:0	ARG:1の番号が보스 촉수のものか、최종 보스 촉수のものかを判断する。0=보스 촉수、1=최종 보스 촉수、2=雑魚戦闘
;ARG:1	相手の촉수を示す。촉수の番号で見る、-1だと보스 촉수が出現しない
;ARG:2	洗脳/悪堕ちキャラが相手の場合、1
;ARG:3	洗脳/悪堕ちのキャラ番号
;ARG:4　敵の選んだコマンド番号
@SET_TENTACLE_SIZE, ARG:0, ARG:1, ARG:2, ARG:3, ARG:4
#DIM LCOUNT
IF ARG:2 > 0
	RESULT = ABL:(ARG:3):레벨
ELSE
	CALL TENTACLE_LEVEL
ENDIF
;極端なサイズありの場合
SIF CONFIG_CHECK_MANIAC_F(20) == 1
	RESULT = RESULT*10

;촉수サイズ基本値
;強制自慰
IF ARG:4 == 1006 && FLAG:700 == 1
	;LOCAL = GAPING_SIZE(10, 0, TARGET)
	FOR LCOUNT, 0, 감각수
		;TENTACLE_SIZE:0:LCOUNT = LOCAL
		TENTACLE_SIZE:0:LCOUNT = GAPING_SIZE_02(CFLAG:1, TARGET)
		TENTACLE_NUM:0:LCOUNT = 2 + RAND:4
	NEXT
	RETURN 0
;洗脳/悪堕ちキャラが相手
ELSEIF ARG:2 > 0
	;기생による촉수がある
	IF TALENT:(ARG:3):기생 > 0
		LOCAL = SQRT((RESULT * 4 + 15 + ABL:(ARG:3):욕망) * (20 + TALENT:(ARG:3):촉수의포로 * 15))
		;極端なサイズOff時は抑制
		SIF CONFIG_CHECK_MANIAC_F(20) == 0
			LOCAL = SQRT(LOCAL * 55)
		FOR LCOUNT, 0, 감각수
			RESULT:LCOUNT = ABL:(ARG:3):LCOUNT * 10 + 50
			RESULT:(LCOUNT+4) = 1
		NEXT
	ELSE
		;各部位に洗脳/悪堕ちキャラの指サイズを指定
		LOCAL = GAPING_SIZE(10, 0, ARG:3)
		FOR LCOUNT, 0, 감각수
			TENTACLE_SIZE:0:LCOUNT = LOCAL
			TENTACLE_NUM:0:LCOUNT = 1
		NEXT
		;洗脳/悪堕ちキャラが男性器を持つ場合、ＶＡのみサイズ指定
		IF ISPENIS(ARG:3)
			LOCAL = ((ABL:(ARG:3):욕망 * 3 + ABL:(ARG:3):사정중독 * 6 + ABL:(ARG:3):C감각 + TALENT:(ARG:3):음란 * 9)) * 18 / 74 + 32
			LOCAL = GAPING_SIZE(LOCAL, 0, ARG:3)
			TENTACLE_SIZE:0:쾌V = LOCAL
			TENTACLE_SIZE:0:쾌A = LOCAL
			TENTACLE_NUM:0:쾌V = 1
			TENTACLE_NUM:0:쾌A = 1
		ENDIF

		;촉수がなければ部位ごとの割り振り・ランダムは必要ない
		RETURN 0
	ENDIF
;보스 촉수
ELSEIF ARG:0 == 0
	LOCAL = SQRT((RESULT * 2 + 30) * 50)
	;極端なサイズOff時は抑制
	SIF CONFIG_CHECK_MANIAC_F(20) == 0
		LOCAL = SQRT(LOCAL * 40)
	TRYCALLFORM TENTACLE_BOSS_{ARG:1}_TENTACLE_SIZE, ARG:4
;최종 보스 촉수
ELSEIF ARG:0 == 1
	LOCAL = SQRT((RESULT * 6 + 35) * 150)
	;極端なサイズOff時は抑制
	SIF CONFIG_CHECK_MANIAC_F(20) == 0
		LOCAL = SQRT(LOCAL * 75)
	TRYCALLFORM TENTACLE_LASTBOSS_{ARG:1}_TENTACLE_SIZE, ARG:4
;雑魚
ELSEIF ARG:0 == 2
	LOCAL = SQRT((RESULT * 1 + 20) * 30)
	;極端なサイズOff時は抑制
	SIF CONFIG_CHECK_MANIAC_F(20) == 0
		LOCAL = SQRT(LOCAL * 25)
	FOR LCOUNT, 0, 감각수
		RESULT:LCOUNT = 100
	NEXT
	TRYCCALLFORM TENTACLE_MOB_{ARG:1}_TENTACLE_SIZE, ARG:4
	CATCH
		RESULT:0 = 120
		RESULT:4 = 1
		RESULT:1 = 80
		RESULT:5 = 1
		RESULT:2 = 80
		RESULT:6 = 1
		RESULT:3 = 120
		RESULT:7 = 1
	ENDCATCH
ENDIF

;Ｃ
TENTACLE_SIZE:0:쾌C = LOCAL * RESULT:0 / (520 + RAND:161) + 2
TENTACLE_NUM:0:쾌C = RESULT:4
;Ｖ
TENTACLE_SIZE:0:쾌V = LOCAL * RESULT:1 / (90 + RAND:21)
TENTACLE_NUM:0:쾌V = RESULT:5
;Ａ
TENTACLE_SIZE:0:쾌A = LOCAL * RESULT:2 / (90 + RAND:21)
TENTACLE_NUM:0:쾌A = RESULT:6
;Ｂ
TENTACLE_SIZE:0:쾌B = LOCAL * RESULT:3 / (255 +  + RAND:91) + 5
TENTACLE_NUM:0:쾌B = RESULT:7

;--------------------------------------------------
;描写に合わせた촉수サイズと本数に変化させる(地の文を優先する)処理
;ARGS:0 촉수の部位　Ｃ　Ｖ　Ａ　Ｂ
;ARGS:1 촉수の太さ　繊毛　細い　普通　太い　極太
;ARGS:2 촉수の数　　単数　複数　たくさん
@SET_TENTACLE_SIZE_BY_MESSAGE, ARGS:0, ARGS:1, ARGS:2
#DIM SELECT
IF ARGS:0 == "Ｃ"
	SELECT = 0
ELSEIF ARGS:0 == "Ｖ"
	SELECT = 1
ELSEIF ARGS:0 == "Ａ"
	SELECT = 2
ELSEIF ARGS:0 == "Ｂ"
	SELECT = 3
ENDIF
IF ARGS:1 == "繊毛"
	IF TENTACLE_SIZE:0:SELECT >= 15
		TENTACLE_SIZE:0:SELECT = RAND:10 + 5
	ENDIF
ELSEIF ARGS:1 == "細い"
	IF TENTACLE_SIZE:0:SELECT < 15
		TENTACLE_SIZE:0:SELECT = RAND:10 + 15
	ELSEIF TENTACLE_SIZE:0:SELECT >= 40
		TENTACLE_SIZE:0:SELECT = RAND:15 + 25
	ENDIF
ELSEIF ARGS:1 == "普通"
	IF TENTACLE_SIZE:0:SELECT < 40
		TENTACLE_SIZE:0:SELECT = RAND:20 + 40
	ELSEIF TENTACLE_SIZE:0:SELECT >= 85
		TENTACLE_SIZE:0:SELECT = RAND:25 + 60
	ENDIF
ELSEIF ARGS:1 == "太い"
	IF TENTACLE_SIZE:0:SELECT < 85
		TENTACLE_SIZE:0:SELECT = RAND:30 + 85
	ELSEIF TENTACLE_SIZE:0:SELECT >= 155
		TENTACLE_SIZE:0:SELECT = RAND:40 + 115
	ENDIF
ELSEIF ARGS:1 == "極太"
	IF TENTACLE_SIZE:0:SELECT < 155
		TENTACLE_SIZE:0:SELECT = RAND:50 + 155
	ENDIF
ENDIF
IF ARGS:2 == "たくさん"
	IF TENTACLE_SIZE:0:SELECT < 5
		TENTACLE_NUM:0:SELECT = RAND:128 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 15
		TENTACLE_NUM:0:SELECT = RAND:64 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 25
		TENTACLE_NUM:0:SELECT = RAND:32 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 40
		TENTACLE_NUM:0:SELECT = RAND:16 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 60
		TENTACLE_NUM:0:SELECT = RAND:8 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 85
		TENTACLE_NUM:0:SELECT = RAND:4 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 115
		TENTACLE_NUM:0:SELECT = RAND:3 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 155
		TENTACLE_NUM:0:SELECT = RAND:2 + 2
	ELSE
		TENTACLE_NUM:0:SELECT = 2
	ENDIF
ELSEIF ARGS:2 == "複数"
	IF TENTACLE_SIZE:0:SELECT < 5
		TENTACLE_NUM:0:SELECT = RAND:64 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 15
		TENTACLE_NUM:0:SELECT = RAND:32 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 25
		TENTACLE_NUM:0:SELECT = RAND:16 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 40
		TENTACLE_NUM:0:SELECT = RAND:8 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 60
		TENTACLE_NUM:0:SELECT = RAND:4 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 85
		TENTACLE_NUM:0:SELECT = RAND:3 + 2
	ELSEIF TENTACLE_SIZE:0:SELECT < 115
		TENTACLE_NUM:0:SELECT = RAND:2 + 2
	ELSE
		TENTACLE_NUM:0:SELECT = 2
	ENDIF
ELSEIF ARGS:2 == "単数"
	TENTACLE_NUM:0:SELECT = 1
ENDIF


;--------------------------------------------------
;結界による촉수本数の変動
@SET_TENTACLE_POOL
#DIM LCOUNT
#DIM TENTACLE_POOL
VARSET TENTACLE_POOL
FOR LCOUNT, 0, 감각수
	;結界が健在な場合
	IF BASE:(LCOUNT + 30) > 0 && (TFLAG:10 != 1006 || CFLAG:0 == 1)
		TENTACLE_NUM:1:LCOUNT = 0
		TENTACLE_POOL ++
	ELSE
		TENTACLE_NUM:1:LCOUNT = TENTACLE_NUM:0:LCOUNT
	ENDIF
NEXT
;結界に防がれた分だけ残った部位の本数が増える
IF TENTACLE_POOL > 0
	FOR LCOUNT, 0, 감각수
		TENTACLE_NUM:1:LCOUNT = TENTACLE_NUM:1:LCOUNT * (100 + TENTACLE_POOL * 25) / 100
		IF TENTACLE_NUM:0:LCOUNT == TENTACLE_NUM:1:LCOUNT
			TENTACLE_NUM:1:LCOUNT += 1
			TENTACLE_NUM:0:LCOUNT += 1
		ENDIF
	NEXT
ENDIF

;計算に使う実際の촉수サイズを設定
CALL SET_TENTACLE_SIZE_R

RETURN 1


;--------------------------------------------------
;幽閉時の処理
;実際の拡張経験への加算処理は専用の関数で行うため、上昇値のみを返す
;対象はTARGET固定
;ARG:0		V経験上昇予定値
;ARG:1		A経験上昇予定値
;ARG:2		V拡張経験上昇予定値
;ARG:3		A拡張経験上昇予定値
;LOCAL:0～3 촉수サイズ？？？
@PRISON_GAPING, ARG:0, ARG:1, ARG:2, ARG:3, ARG:4, LOCAL:0, LOCAL:1, LOCAL:2, LOCAL:3
VARSET TENTACLE_SIZE
;悪堕ちに幽閉
IF CFLAG:20 == 2
	CALL SET_TENTACLE_SIZE, 0, 0, CFLAG:20, FLAG:111
;촉수に幽閉
ELSE
	CALL SET_TENTACLE_SIZE, CFLAG:20, CFLAG:21, 0, 0,-TFLAG:10
ENDIF
;REPEAT 감각수
;	TENTACLE_NUM:1:COUNT = TENTACLE_NUM:0:COUNT
;REND

;計算に使う実際の촉수サイズを設定
CALL SET_TENTACLE_SIZE_R

;各部位に使用される촉수サイズの表示
SIF CONFIG_CHECK_MANIAC_F(16) == 1 && CFLAG:34 > 0
	CALL PRINT_TENTACLE_SIZE, LOCAL:0, LOCAL:1, LOCAL:2, LOCAL:3


;V拡張判定
IF ARG:0 > 0
	CALL GET_V_GAPING_EXP(GAPING_SIZE_TO_POINT("Ｖ"), TARGET, 1)
	ARG:2 += RESULT
	CALL V_GAPING(GAPING_SIZE_TO_POINT("Ｖ"))
	SIF RESULT > 0 && CONFIG_CHECK_MANIAC_F(16) == 1
		PRINTFORML 질径：＋{RESULT / 10}.{RESULT % 10} cm
ENDIF
;A拡張判定
IF ARG:1 > 0
	CALL GET_A_GAPING_EXP(GAPING_SIZE_TO_POINT("Ａ"), TARGET, 1)
	ARG:3 += RESULT
	CALL A_GAPING(GAPING_SIZE_TO_POINT("Ａ"))
	SIF RESULT > 0 && CONFIG_CHECK_MANIAC_F(16) == 1
		PRINTFORML 肛径：＋{RESULT / 10}.{RESULT % 10} cm
ENDIF

RETURN ARG:2, ARG:3


;--------------------------------------------------
;計算に使う実際の촉수サイズを設定
@SET_TENTACLE_SIZE_R
REPEAT 감각수
	IF TENTACLE_NUM:0:COUNT > 2
		TENTACLE_SIZE:1:COUNT = TENTACLE_SIZE:0:COUNT * (TENTACLE_NUM:0:COUNT + 4) / 3
	ELSE
		TENTACLE_SIZE:1:COUNT = TENTACLE_SIZE:0:COUNT * TENTACLE_NUM:0:COUNT
	ENDIF
	;極端な촉수の太さを抑制するがオンの場合A以上にならないようにする
	IF CONFIG_CHECK_MANIAC_F(20) == 1
		LOCAL:1 = GAPING_SIZE(154 - RAND:19)
		LOCAL:2 = GAPING_SIZE(155)
		IF TENTACLE_SIZE:1:COUNT >= LOCAL:2
			IF TENTACLE_NUM:0:COUNT > 2
				TENTACLE_SIZE:0:COUNT = LOCAL:1 / (TENTACLE_NUM:0:COUNT + 4) * 3
			ELSE
				TENTACLE_SIZE:0:COUNT = LOCAL:1 / TENTACLE_NUM:0:COUNT
			ENDIF
		ENDIF
	ENDIF
REND
;ピストン系なら太さ＆数をそのままに
IF TFLAG:10 >= 15 && TFLAG:10 <= 20 && FLAG:700
	REPEAT 감각수
		IF (COUNT + 101 == 102 && (TFLAG:109 & 질) && (INSERT & 질)) || (COUNT + 101 == 103 && (TFLAG:109 & 애널) && (INSERT & 애널))
			TENTACLE_SIZE:0:COUNT = TFLAG:(COUNT + 101)
			TENTACLE_NUM:0:COUNT = TFLAG:(COUNT + 105)
			TENTACLE_NUM:1:COUNT = TFLAG:(COUNT + 105)
		ENDIF
	REND
;V拡張攻めなら太さ補正
ELSEIF (TFLAG:10 == 1009 && FLAG:700) || (TFLAG:10 == 101 && FLAG:700 == 0)
	TIMES TENTACLE_SIZE:0:1, 1.3
;A拡張攻めなら太さ補正
ELSEIF (TFLAG:10 == 1010 && FLAG:700) || (TFLAG:10 == 102 && FLAG:700 == 0)
	TIMES TENTACLE_SIZE:0:2, 1.3
ENDIF
;補正した時用に재계산
REPEAT 감각수
	IF TENTACLE_NUM:0:COUNT > 2
		TENTACLE_SIZE:1:COUNT = TENTACLE_SIZE:0:COUNT * (TENTACLE_NUM:0:COUNT + 4) / 3
	ELSE
		TENTACLE_SIZE:1:COUNT = TENTACLE_SIZE:0:COUNT * TENTACLE_NUM:0:COUNT
	ENDIF
REND

